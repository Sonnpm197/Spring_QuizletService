server:
  port: 8081
spring:
  application:
    name: quizlet
  zipkin:
    enabled: false
  cloud:
    stream:
      bindings:
#          output is the name of your channel and maps to the Source.output() channel

#        ------------- Using default channel "output"

        output:
          destination: quizletChangeQueue # name of the message queue
          content-type: application/json

        kafka:
          binder: # location of kafka & zookeeper
            zkNodes: localhost
            brokers: localhost

eureka:
  instance:
    #    In a container-based deployment (for example, Docker), containers will be
    #    started with randomly generated hostnames and no DNS entries for
    #    the containers =>> your client applications wonâ€™t properly resolve the
    #    location of the hostnames because there will
    #    be no DNS entry for that container
    prefer-ip-address: true
  client:
    register-with-eureka: true
    #    tell the Spring Eureka Client to fetch a local copy of the registry.
    #    Setting this attribute to true will cache the registry locally instead of calling the Eureka
    #    service with every lookup. Every 30 seconds, the client software will re-contact the
    #    Eureka service for any changes to the registry
    fetch-registry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

#  once you set up the service as a protected resource,
#  every time a call is made to the service, the caller has to include the Authentication
#  HTTP header containing an OAuth2 access token to the service. Your protected
#  resource then has to call back to the OAuth2 service to see if the token is valid

security:
  oauth2:
    resource:
      userInfoUri: http://localhost:8901/user